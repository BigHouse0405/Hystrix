buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.0.3'
    }
}

plugins {
    id 'nebula.netflixoss' version '3.2.3'
    id 'me.champeau.gradle.jmh' version '0.2.0'
    id 'net.saliman.cobertura' version '2.2.8'
}

ext {
    githubProjectName = rootProject.name
}

allprojects {
    repositories {
        jcenter()
    }

    apply plugin: 'net.saliman.cobertura'
}

subprojects {
    apply plugin: 'nebula.netflixoss'
    apply plugin: 'java'
    apply plugin: 'nebula.provided-base'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6



    group = "com.netflix.${githubProjectName}"

    eclipse {
        classpath {
            // include 'provided' dependencies on the classpath
            plusConfigurations += [configurations.provided]
            downloadSources = true
            downloadJavadoc = true
        }
    }

    idea {
        module {
            // include 'provided' dependencies on the classpath
            scopes.COMPILE.plus += [configurations.provided]
        }
    }

    //mark all first-level dependencies as 'compile' in generated POM
    //except for 'servlet-api', which should be 'provided'
    publishing {
        publications {
            nebula(MavenPublication) {
                pom.withXml {
                    configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
                        if (dep.moduleName == "servlet-api") {
                            asNode().dependencies[0].dependency.find {
                                it.artifactId[0].text() == dep.moduleName &&
                                        it.groupId[0].text() == dep.moduleGroup
                            }.scope[0].value = 'provided'
                        } else {
                            asNode().dependencies[0].dependency.find {
                                it.artifactId[0].text() == dep.moduleName &&
                                        it.groupId[0].text() == dep.moduleGroup
                            }.scope[0].value = 'compile'
                        }
                    }
                }
            }
        }
    }
}
